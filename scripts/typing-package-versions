#!/usr/bin/env python3

"""
Computes a list of packages that expose stubs in PEP 561 format.
This list is intended to be copied in .pre-commit-config.yaml,
though for now it's still a manual process.
"""

import pathlib
from importlib import metadata

import tomlkit


def normalize(name):
    return name.lower().replace("_", "-")


def main():
    # Because they're likely not installed on this env.
    ignored_runtime_deps = {"importlib-metadata", "importlib-resources"}

    pyproject = tomlkit.parse(pathlib.Path("pyproject.toml").read_text())
    runtime_deps = (
        {normalize(name) for name in pyproject["tool"]["poetry"]["dependencies"]}
        - {"python"}
        - ignored_runtime_deps
    )
    print(f"Runtime dependencies: {', '.join(sorted(runtime_deps))}")

    distributions = {
        normalize(dist.metadata["Name"]): dist for dist in metadata.distributions()
    }
    runtime_packages = {
        p.parts[0]: dep
        for dep in runtime_deps
        for p in distributions[dep].files
        if str(p).endswith(".py")
    }

    stubs_packages = set()
    for name, dist in distributions.items():
        top_level_packages = {p.parts[0] for p in dist.files}
        for package in top_level_packages:
            try:
                target, stubs = package.rsplit("-", 1)
            except ValueError:
                continue

            if stubs != "stubs":
                continue

            if target not in runtime_packages:
                continue

            print(
                f"Module {target} has PEP-561 stubs ({target}-stubs) in package {name}"
            )
            stubs_packages.add(name)

    for name in runtime_deps:
        for path in distributions[name].files:
            if path.name == "py.typed" and len(path.parts) == 2:
                print(
                    f"Module {path.parts[0]} is typed with py.typed file in package {name}"
                )
                stubs_packages.add(name)

    stubs_with_versions = {name: distributions[name].version for name in stubs_packages}

    # Special case for sqlalchemy because it insists a lot on being special.
    stubs_with_versions.pop("sqlalchemy2-stubs")
    stubs_with_versions["sqlalchemy[mypy]"] = distributions["sqlalchemy"].version

    print()
    print(
        "\n".join(
            f"    - {name}=={version}"
            for name, version in sorted(stubs_with_versions.items())
        )
    )


if __name__ == "__main__":
    main()
